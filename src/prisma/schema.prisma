generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id             String  @id @default(uuid())
  user_id        String?
  abandon_at     BigInt?
  client_id      String?
  created_at     BigInt?
  expires_at     BigInt?
  last_active_at BigInt?
  object         String?
  status         String?
  updated_at     BigInt?

  @@map("aisnk_user_session")
}

model User {
  id                String             @id @default(uuid())
  email_address     UserEmailAddress[]
  first_name        String?
  last_name         String?
  last_sign_in_at   BigInt?
  profile_image_url String?
  image_url         String?
  object            String?
  created_at        BigInt?
  updated_at        BigInt?

  @@map("aisnk_user")
}

model UserEmailAddress {
  id            String  @id @default(uuid())
  email_address String?
  object        String?
  user          User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id       String?

  @@map("aisnk_user_email_address")
}

model ProductsOnOrders {
  productId      String
  orderId        String
  title          String?
  color          String?
  size           String?
  currency       String?
  amountDiscount Int?
  amountSubtotal Int?
  amountTax      Int?
  amountTotal    Int?
  quantity       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, orderId])
  @@index([orderId], map: "aisnk_products_on_orders_orderId_fkey")
  @@map("aisnk_products_on_orders")
}

model ShippingAddress {
  id           String  @id @default(uuid())
  streetNumber String?
  streetName   String?
  city         String?
  state        String?
  postalCode   String?
  country      String?
  orderId      String  @unique
  order        Order   @relation(fields: [orderId], references: [id])

  @@map("aisnk_shipping_address")
}

model Order {
  id              String             @id @default(uuid())
  customerClerkId String?
  shippingRate    String?
  totalAmount     Int?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @default(now())
  customerId      String?
  status          String?
  customer        Customer?          @relation(fields: [customerId], references: [id])
  products        ProductsOnOrders[]
  shippingAddress ShippingAddress?

  @@index([customerId], map: "aisnk_order_customerId_fkey")
  @@map("aisnk_order")
}

model Customer {
  id        String   @id @unique
  name      String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  orders    Order[]

  @@map("aisnk_customer")
}

model Collection {
  id          String                  @id @default(uuid())
  title       String                  @unique
  description String?                 @db.Text
  images      String                  @db.Text
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now())
  status      String?
  products    ProductsOnCollections[]

  @@map("aisnk_collection")
}

model Product {
  id          String                  @id @default(uuid())
  title       String                  @unique
  description String                  @db.Text
  images      String                  @db.Text
  category    String?
  tags        String?
  sizes       String?
  colors      String?
  price       Float
  expense     Float?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now())
  status      String?
  stock       Float?
  collections ProductsOnCollections[]
  orders      ProductsOnOrders[]

  @@map("aisnk_product")
}

model ProductsOnCollections {
  productId    String
  collectionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
  @@index([collectionId], map: "aisnk_products_on_collections_collectionId_fkey")
  @@map("aisnk_products_on_collections")
}
